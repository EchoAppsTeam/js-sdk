Ext.data.JsonP.how_to_work_with_labels({
  "guide": "<h1 id='how_to_work_with_labels-section-how-to-work-with-text-labels'>How to work with text labels</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/how_to_work_with_labels-section-echo-labels-library'>Echo.Labels library</a></li>\n<li><a href='#!/guide/how_to_work_with_labels-section-local-storage'>Local storage</a></li>\n<li><a href='#!/guide/how_to_work_with_labels-section-placeholders'>Placeholders</a></li>\n<li><a href='#!/guide/how_to_work_with_labels-section-library-utilization'>Library utilization</a></li>\n</ol>\n</div>\n\n<h2 id='how_to_work_with_labels-section-echo-labels-library'>Echo.Labels library</h2>\n\n<p>Any text part of Echo JS-SDK application interface is implemented with the help of\n<a href=\"#!/api/Echo.Labels\" rel=\"Echo.Labels\" class=\"docClass\">Echo.Labels</a> library.\nIt provides basic machinery to create, modify and employ different language variables\nacross all components.</p>\n\n<p>There are several use cases covered by <a href=\"#!/api/Echo.Labels\" rel=\"Echo.Labels\" class=\"docClass\">Echo.Labels</a> library, it should be used\nfor localization purposes, to create text part of particular interface\nand to override existing language variables.</p>\n\n<h3 id='how_to_work_with_labels-section-namespace'>Namespace</h3>\n\n<p>To make text labels utilization more comfortable we introduced namespaces\nfor the language variables across different components. Splitting the corresponding\nvalues into separate logical blocks helps to address the necessary label\nin a convenient way. Variables with the same name but belonging to different\nnamespaces will not interfere each other.</p>\n\n<h3 id='how_to_work_with_labels-section-global-storage'>Global storage</h3>\n\n<p>The library provides several type of text labels storage for different purposes.\nGlobal storage and local instantiated <a href=\"#!/api/Echo.Labels\" rel=\"Echo.Labels\" class=\"docClass\">Echo.Labels</a> objects are used.</p>\n\n<p>Global storage is the data array shared for all components. It combines default\nand custom areas. When a text label is being addressed from the global storage\nwe look for it in custom area first and then in the default section if nothing was found.</p>\n\n<p>There is no need to create global storage explicitly, it is created when\nthe <a href=\"#!/api/Echo.Labels\" rel=\"Echo.Labels\" class=\"docClass\">Echo.Labels</a> library is loaded. However each label which will be used later\nin the application should be pushed to the storage using the static <a href=\"#!/api/Echo.Labels-method-set\" rel=\"Echo.Labels-method-set\" class=\"docClass\">Echo.Labels.set</a> method.\nTo access a particular language variable from the global storage the static accessor\n<a href=\"#!/api/Echo.Labels-method-get\" rel=\"Echo.Labels-method-get\" class=\"docClass\">Echo.Labels.get</a> method should be used.</p>\n\n<pre><code>// First let's add labels for MyApp into the global storage\n<a href=\"#!/api/Echo.Labels-method-set\" rel=\"Echo.Labels-method-set\" class=\"docClass\">Echo.Labels.set</a>({\n    \"label1\": \"Label 1\",\n    \"label2\": \"Label 2\"\n}, \"MyLib.MyApp\", true);\n\n<a href=\"#!/api/Echo.Labels-method-get\" rel=\"Echo.Labels-method-get\" class=\"docClass\">Echo.Labels.get</a>(\"label1\", \"MyLib.MyApp\"); // =&gt; \"Label 1\"\n\n// Then add labels for another app\n<a href=\"#!/api/Echo.Labels-method-set\" rel=\"Echo.Labels-method-set\" class=\"docClass\">Echo.Labels.set</a>({\n    \"label1\": \"Another Label 1\",\n    \"label2\": \"Another Label 2\"\n}, \"MyLib.MyApp2\", true);\n\n<a href=\"#!/api/Echo.Labels-method-get\" rel=\"Echo.Labels-method-get\" class=\"docClass\">Echo.Labels.get</a>(\"label1\", \"MyLib.MyApp\"); // =&gt; \"Label 1\"\n<a href=\"#!/api/Echo.Labels-method-get\" rel=\"Echo.Labels-method-get\" class=\"docClass\">Echo.Labels.get</a>(\"label1\", \"MyLib.MyApp2\"); // =&gt; \"Another Label 1\"\n\n// So add a label into the custom area\n<a href=\"#!/api/Echo.Labels-method-set\" rel=\"Echo.Labels-method-set\" class=\"docClass\">Echo.Labels.set</a>({\n    \"label2\": \"Label 2 custom\"\n}, \"MyLib.MyApp\");\n\n<a href=\"#!/api/Echo.Labels-method-get\" rel=\"Echo.Labels-method-get\" class=\"docClass\">Echo.Labels.get</a>(\"label1\", \"MyLib.MyApp\"); // =&gt; \"Label 1\"\n<a href=\"#!/api/Echo.Labels-method-get\" rel=\"Echo.Labels-method-get\" class=\"docClass\">Echo.Labels.get</a>(\"label2\", \"MyLib.MyApp\"); // =&gt; \"Label 2 custom\"\n\n// And also try to change the same label in the default area\n<a href=\"#!/api/Echo.Labels-method-set\" rel=\"Echo.Labels-method-set\" class=\"docClass\">Echo.Labels.set</a>({\n    \"label2\": \"Label 2 default\"\n}, \"MyLib.MyApp\", true);\n\n<a href=\"#!/api/Echo.Labels-method-get\" rel=\"Echo.Labels-method-get\" class=\"docClass\">Echo.Labels.get</a>(\"label2\", \"MyLib.MyApp\"); // =&gt; \"Label 2 custom\"\n</code></pre>\n\n<h2 id='how_to_work_with_labels-section-local-storage'>Local storage</h2>\n\n<p>Another opportunity to utilize the library is to instantiate an <a href=\"#!/api/Echo.Labels\" rel=\"Echo.Labels\" class=\"docClass\">Echo.Labels</a> object.\nSuch objects help to override the language variables stored in the global storage.\nAccessor method is implemented via cascade addressing, it will try to get the necessary\nvalue from the local storage, then in the custom section of the global storage\nand after all in the default area. Object can be instantiated in a general JavaScript way:</p>\n\n<pre><code>var labels = new <a href=\"#!/api/Echo.Labels\" rel=\"Echo.Labels\" class=\"docClass\">Echo.Labels</a>({}, \"MyNamespace\");\n</code></pre>\n\n<p>Each object has its own namespace which can't be overridden. The\n<a href=\"#!/api/Echo.Labels-method-set\" rel=\"Echo.Labels-method-set\" class=\"docClass\">labels.set</a> and <a href=\"#!/api/Echo.Labels-method-get\" rel=\"Echo.Labels-method-get\" class=\"docClass\">labels.get</a>\nmethods are used to set and access data. Strictly speaking\ntwo different instances of <a href=\"#!/api/Echo.Labels\" rel=\"Echo.Labels\" class=\"docClass\">Echo.Labels</a> object will not share language variables\neven if they will be created with the same namespace.</p>\n\n<pre><code>// In addition to the previous example let's instantiate a new local storage\nvar localLabels = new <a href=\"#!/api/Echo.Labels\" rel=\"Echo.Labels\" class=\"docClass\">Echo.Labels</a>({\n    \"label1\": \"Local Label 1\"\n}, \"MyLib.MyApp\");\n\nlocalLabels.get(\"label1\"); // =&gt; \"Local Label 1\"\nlocalLabels.get(\"label2\"); // =&gt; \"Label 2 custom\"\n\n// Then try to create another instance of the local storage\nvar localLabels2 = new <a href=\"#!/api/Echo.Labels\" rel=\"Echo.Labels\" class=\"docClass\">Echo.Labels</a>({\n    \"label1\": \"Another Local Label 1\"\n}, \"MyLib.MyApp\");\n\nlocalLabels2.get(\"label1\"); // =&gt; \"Another Local Label 1\"\nlocalLabels2.get(\"label2\"); // =&gt; \"Label 2 custom\"\n</code></pre>\n\n<h2 id='how_to_work_with_labels-section-placeholders'>Placeholders</h2>\n\n<p>Text labels might contain special placeholders for more flexible utilization.\nThe corresponding language variable should contain the necessary key surrounded\nby curly braces. To fill the necessary values they should be passed to the accessor method.\nIf keys will not match then the placeholder will not be substituted and stay unchanged.</p>\n\n<p>For example for the 'pageNumber' language variable containing the following text:\n'Page {page} of {total}' we can call the accessor method this way:</p>\n\n<pre><code><a href=\"#!/api/Echo.Labels-method-get\" rel=\"Echo.Labels-method-get\" class=\"docClass\">Echo.Labels.get</a>(\"pageNumber\", \"common\", {\n    \"page\": 1,\n    \"total\": 10\n});\n</code></pre>\n\n<p>It will return us the 'Page 1 of 10' string value.</p>\n\n<h2 id='how_to_work_with_labels-section-library-utilization'>Library utilization</h2>\n\n<p>All apps and plugins built on top of JS SDK support text labels by default.\nMost likely you will not face any difficulties trying to create some text part\nof your interface. In some obvious use cases you even do not have to call <a href=\"#!/api/Echo.Labels\" rel=\"Echo.Labels\" class=\"docClass\">Echo.Labels</a> directly.</p>\n\n<h3 id='how_to_work_with_labels-section-namespace'>Namespace</h3>\n\n<p>The <a href=\"#!/guide/how_to_develop_app\">application</a> name\nis used as a basic namespace for text labels. For the\n<a href=\"#!/guide/how_to_develop_plugin\">plugin</a> it will be\nextended with the parent component name: <code>&lt;ComponentName&gt;.Plugins.&lt;PluginName&gt;</code>.</p>\n\n<h3 id='how_to_work_with_labels-section-default-labels'>Default Labels</h3>\n\n<p>When you are developing a new application or a plugin you can set\nthe language variables list in the manifest section.</p>\n\n<pre><code>var Comments = <a href=\"#!/api/Echo.App-static-method-manifest\" rel=\"Echo.App-static-method-manifest\" class=\"docClass\">Echo.App.manifest</a>(\"Echo.Apps.CommentsSample\");\n// ...\nComments.labels = {\n    \"topComments\": \"Top Comments\",\n    \"allComments\": \"All Comments\"\n};\n</code></pre>\n\n<p><a href=\"#!/api/Echo.App\" rel=\"Echo.App\" class=\"docClass\">Echo.App</a> which is the basic class for all applications and <a href=\"#!/api/Echo.Plugin\" rel=\"Echo.Plugin\" class=\"docClass\">Echo.Plugin</a>\nfor the plugins will do the backstage work to push the defined language variables into\nglobal storage default section.</p>\n\n<h3 id='how_to_work_with_labels-section-language-variables-as-a-part-of-configuration'>Language variables as a part of configuration</h3>\n\n<p>Text labels can not only be set at the component level but also be added dynamically\nfor the corresponding instance. The same rules applies for the plugins and applications.</p>\n\n<p>This example shows how to override language variables for this particular instance\nof an application:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    <a href=\"#!/api/Echo.Loader-static-method-initApplication\" rel=\"Echo.Loader-static-method-initApplication\" class=\"docClass\">Echo.Loader.initApplication</a>({\n        \"script\": \"http://cdn.echoenabled.com/sdk/v3/streamserver.pack.js\",\n        \"component\": \"<a href=\"#!/api/Echo.StreamServer.Controls.Stream\" rel=\"Echo.StreamServer.Controls.Stream\" class=\"docClass\">Echo.StreamServer.Controls.Stream</a>\",\n        \"config\": {\n            // …\n            \"labels\": {\n                \"live\": \"Live mode\"\n            }\n        }\n    });\n&lt;/script&gt;\n</code></pre>\n\n<p>Text labels in the app can be redefined this way:</p>\n\n<pre><code>var Comments = <a href=\"#!/api/Echo.App-static-method-manifest\" rel=\"Echo.App-static-method-manifest\" class=\"docClass\">Echo.App.manifest</a>(\"Echo.Apps.CommentsSample\");\n// ...\nComments.renderers.submit = function(element) {\n    this.initComponent({\n        \"id\": \"Submit\",\n        \"component\": \"<a href=\"#!/api/Echo.StreamServer.Controls.Submit\" rel=\"Echo.StreamServer.Controls.Submit\" class=\"docClass\">Echo.StreamServer.Controls.Submit</a>\",\n        \"config\": {\n            \"target\": element,\n            \"infoMessages\": {\"enabled\": false},\n            \"labels\": {\n                \"post\": \"Post your comment\"\n            }\n        }\n    });\n    return element;\n};\n</code></pre>\n\n<p>Next example shows how to override the 'editButton' label in the 'Edit' plugin:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    <a href=\"#!/api/Echo.Loader-static-method-initApplication\" rel=\"Echo.Loader-static-method-initApplication\" class=\"docClass\">Echo.Loader.initApplication</a>({\n        \"script\": \"http://cdn.echoenabled.com/apps/echo/comments-sample/comments-sample.js\",\n        \"component\": \"Echo.Apps.CommentsSample\",\n        \"config\": {\n            // ...\n            \"components\": {\n                \"Stream\": {\n                    // ...\n                    \"plugins\": [{\n                        \"name\": \"Edit\",\n                        \"labels\": {\n                            \"editButton\": \"Modify\"\n                        },\n                        // ...\n                    }]\n                },\n                // ...\n            },\n            // ...\n        }\n    });\n&lt;/script&gt;\n</code></pre>\n\n<h3 id='how_to_work_with_labels-section-language-variables-in-templates'>Language variables in templates</h3>\n\n<p>Text labels defined either through the component manifest or via the configuration\nexplicitly can be used in the templates using the special <code>{label:...}</code> placeholders.\nFor example:</p>\n\n<pre><code>var submit = <a href=\"#!/api/Echo.Control-static-method-manifest\" rel=\"Echo.Control-static-method-manifest\" class=\"docClass\">Echo.Control.manifest</a>(\"<a href=\"#!/api/Echo.StreamServer.Controls.Submit\" rel=\"Echo.StreamServer.Controls.Submit\" class=\"docClass\">Echo.StreamServer.Controls.Submit</a>\");\n// ...\nsubmit.templates.formTitle = '&lt;div&gt;{label:title}&lt;/div&gt;';\n</code></pre>\n\n<p>Plugin's language variables are available through the <code>{plugin.label:...}</code> placeholder:</p>\n\n<pre><code>var reply = <a href=\"#!/api/Echo.Plugin-static-method-manifest\" rel=\"Echo.Plugin-static-method-manifest\" class=\"docClass\">Echo.Plugin.manifest</a>(\"Reply\", \"<a href=\"#!/api/Echo.StreamServer.Controls.Stream.Item\" rel=\"Echo.StreamServer.Controls.Stream.Item\" class=\"docClass\">Echo.StreamServer.Controls.Stream.Item</a>\");\n// ...\nreply.templates.formTitle = \"&lt;div&gt;{plugin.label:title}&lt;/div&gt;\";\n</code></pre>\n\n<p>If the <code>{label:...}</code> placeholder is used inside the plugin, the necessary value will be\naddressed from the parent component or application.</p>\n",
  "title": "How to work with text labels"
});