Ext.data.JsonP.how_to_initialize_components({
  "guide": "<h1 id='how_to_initialize_components-section-how-to-initialize-echo-components'>How to initialize Echo components</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/how_to_initialize_components-section-initializing-an-app'>Initializing an app</a></li>\n<li><a href='#!/guide/how_to_initialize_components-section-initializing-plugins'>Initializing plugins</a></li>\n</ol>\n</div>\n\n<h2 id='how_to_initialize_components-section-initializing-an-app'>Initializing an app</h2>\n\n<p>Every application is represented by a single JS class. In order to make it work, Echo JS SDK environment should be loaded on a page and the class should be initialized in a certain way depending on the component role.</p>\n\n<h3 id='how_to_initialize_components-section-initializing-a-component-as-a-standalone-application'>Initializing a component as a standalone application</h3>\n\n<p>If you need to initialize a component as a standalone app on a page, you should use unified apps init function called <a href=\"#!/api/Echo.Loader-static-method-initApplication\" rel=\"Echo.Loader-static-method-initApplication\" class=\"docClass\">Echo.Loader.initApplication</a>. The function is defined in the \"loader.js\" file, so you have to include it into the page source first (<span style=\"color: red;\">only once per page!</span>). So the final code might look like:</p>\n\n<pre><code>&lt;script src=\"http://cdn.echoenabled.com/sdk/v3/loader.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    <a href=\"#!/api/Echo.Loader-static-method-initApplication\" rel=\"Echo.Loader-static-method-initApplication\" class=\"docClass\">Echo.Loader.initApplication</a>({\n        \"script\": \"http://cdn.echoenabled.com/sdk/v3/streamserver.pack.js\",\n        \"component\": \"<a href=\"#!/api/Echo.StreamServer.Controls.Stream\" rel=\"Echo.StreamServer.Controls.Stream\" class=\"docClass\">Echo.StreamServer.Controls.Stream</a>\",\n        \"backplane\": {\n            \"serverBaseURL\": \"http://api.echoenabled.com/v1\",\n            \"busName\": \"your_bus_name\"\n        },\n        \"config\": {\n            \"target\": document.getElementById(\"stream\"),\n            \"query\": \"your_search_query\",\n            \"appkey\": \"your_appkey\",\n            \"item\": {\"reTag\": false},\n            \"plugins\": [{\n                \"name\": \"Reply\"\n            }, {\n                \"name\": \"Moderation\"\n            }]\n        }\n    });\n&lt;/script&gt;\n</code></pre>\n\n<p>More information regarding the <a href=\"#!/api/Echo.Loader-static-method-initApplication\" rel=\"Echo.Loader-static-method-initApplication\" class=\"docClass\">Echo.Loader.initApplication</a> function can be found <a href=\"#!/api/Echo.Loader-static-method-initApplication\">here</a>.</p>\n\n<h3 id='how_to_initialize_components-section-initializing-a-component-as-an-internal-one-of-an-app-inherited-from-echo-app'>Initializing a component as an internal one of an app inherited from Echo.App</h3>\n\n<p>If you are building an app based on the <a href=\"#!/api/Echo.App\" rel=\"Echo.App\" class=\"docClass\">Echo.App</a> abstraction and you need to initialize an internal app inside it, the best approach would be to employ the <a href=\"#!/api/Echo.App-method-initComponent\">Echo.App.initComponent</a> function. In this case <a href=\"#!/api/Echo.App\" rel=\"Echo.App\" class=\"docClass\">Echo.App</a> abstraction will take care of the app management (passing some params, destroying it when the main app is destroyed, etc). In the example below an app initialization consists of 2 parts: component default configuration and the init call itself. Example code:</p>\n\n<pre><code>// application config\nYourApplication.config = {\n    ...\n    \"components\": {\n        \"Stream\": {\n            \"query\": \"your_search_query\",\n            \"plugins\": [{\n                \"name\": \"Reply\"\n            }]\n        }\n    }\n    …\n};\n\n…\n\nYourApplication.renderers.stream = function(element) {\n    this.initComponent({\n        \"id\": \"Stream\", // id in the \"component\" configuration object\n        \"component\": \"<a href=\"#!/api/Echo.StreamServer.Controls.Stream\" rel=\"Echo.StreamServer.Controls.Stream\" class=\"docClass\">Echo.StreamServer.Controls.Stream</a>\",\n            \"config\": {\n                \"target\": element,\n                \"appkey\": \"your_appkey\",\n                \"item\": {\"reTag\": false},\n                \"plugins\": [{\n                    \"name\": \"Moderation\"\n                }]\n            }\n    });\n};\n</code></pre>\n\n<p>More information regarding the <a href=\"#!/api/Echo.App-method-initComponent\" rel=\"Echo.App-method-initComponent\" class=\"docClass\">Echo.App.initComponent</a> function can be found <a href=\"#!/api/Echo.App-method-initComponent\" rel=\"Echo.App-method-initComponent\" class=\"docClass\">here</a>.</p>\n\n<h3 id='how_to_initialize_components-section-initializing-a-component-in-other-cases'>Initializing a component in other cases</h3>\n\n<p>If you want to init an app in some other cases, it’s possible to call component constructor directly, just make sure that Echo JS SDK environment was loaded on a page.</p>\n\n<pre><code>new <a href=\"#!/api/Echo.StreamServer.Controls.Stream\" rel=\"Echo.StreamServer.Controls.Stream\" class=\"docClass\">Echo.StreamServer.Controls.Stream</a>({\n    \"target\": document.getElementById(\"stream\"),\n    \"query\": \"your_search_query\",\n    \"appkey\": \"your_appkey\",\n    \"item\": {\"reTag\": false},\n    \"plugins\": [{\n        \"name\": \"Reply\"\n    }, {\n        \"name\": \"Moderation\"\n    }]\n});\n</code></pre>\n\n<p><span style=\"color: red;\">Note: an app initialization via <a href=\"#!/api/Echo.Loader-static-method-initApplication\" rel=\"Echo.Loader-static-method-initApplication\" class=\"docClass\">Echo.Loader.initApplication</a> function is the preferred way and should be used in most cases.</span></p>\n\n<h2 id='how_to_initialize_components-section-initializing-plugins'>Initializing plugins</h2>\n\n<p>Almost every app built using Echo JS SDK can be extended via <a href=\"#!/guide/how_to_develop_plugin\">Plugins</a>. In order to init a plugin for a given app, you should place the object with the \"name\" field into the \"plugins\" array, for example as shown below:</p>\n\n<pre><code>new <a href=\"#!/api/Echo.StreamServer.Controls.Stream\" rel=\"Echo.StreamServer.Controls.Stream\" class=\"docClass\">Echo.StreamServer.Controls.Stream</a>({\n    \"target\": document.getElementById(\"stream\"),\n    \"appkey\": \"echo.jssdk.demo.aboutecho.com\",\n    \"plugins\": [{\n        \"name\": \"Reply\"\n    }]\n});\n</code></pre>\n\n<p>If your plugin has configurable options, you should put them into the same object, so that the plugin code can access them. For example:</p>\n\n<pre><code>new <a href=\"#!/api/Echo.StreamServer.Controls.Stream\" rel=\"Echo.StreamServer.Controls.Stream\" class=\"docClass\">Echo.StreamServer.Controls.Stream</a>({\n    \"target\": document.getElementById(\"stream\"),\n    \"appkey\": \"echo.jssdk.demo.aboutecho.com\",\n    \"plugins\": [{\n        \"name\": \"Reply\",\n        \"actionString\": \"Type your comment here...\"\n    }]\n});\n</code></pre>\n\n<p>If your plugin’s code is not loaded on a page yet, Echo JS SDK engine can take care of it for you, just add the \"url\" parameter with the plugin script URL. In this case the script will be downloaded and executed before the plugin initialization. For example:</p>\n\n<pre><code>new <a href=\"#!/api/Echo.StreamServer.Controls.Stream\" rel=\"Echo.StreamServer.Controls.Stream\" class=\"docClass\">Echo.StreamServer.Controls.Stream</a>({\n    \"target\": document.getElementById(\"stream\"),\n    \"appkey\": \"echo.jssdk.demo.aboutecho.com\",\n    \"plugins\": [{\n        \"name\": \"MyCustomPlugin\",\n        \"url\": \"URL to MyCustomPlugin\"\n    }]\n});\n</code></pre>\n",
  "title": "How to initialize Echo components"
});